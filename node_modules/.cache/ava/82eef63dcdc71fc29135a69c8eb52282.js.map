{"version":3,"sources":["test/configTests.js"],"names":["test","require","decode","random","times","matchAll","getFileFromContainer","DEFAULT_CONFIG","network","mergeConfig","config","getOptions","factomdConf","app","getArgs","startupScript","regex","match","args","exec","_","key","value","randomInt","min","max","randomSeconds","randomPort","randomHexId","len","toString","join","randomString","randomPem","name","optTest","yamlName","optionName","valueOverride","t","options","is","argTest","argName","apiPassword","apiUser","apiPort","authorityServerPrivateKey","authorityServerPublicKey","brainSwapHeight","broadcastNumber","controlPanelMode","controlPanelPort","corsDomains","customBootstrapIdentity","customBootstrapKey","customExchangeRateAuthorityPublicKey","customNetworkId","customNetworkPort","customSeedUrl","customSpecialPeers","directoryBlockInSeconds","fastBoot","faultTimeoutInSeconds","identityChainId","localNetworkPort","localSeedUrl","localSpecialPeers","logLevel","mainNetworkPort","mainSeedUrl","mainSpecialPeers","nodeName","specialPeersDialOnly","specialPeersOnly","startDelayInSeconds","testNetworkPort","testSeedUrl","testSpecialPeers","tlsEnabled","tlsPrivateKey","tlsPublicCert"],"mappings":"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","sourceRoot":"/Users/jay/code/factomd-docker","sourcesContent":["const test = require('ava')\nconst {decode} = require('ini')\nconst {random, times} = require('lodash/fp')\nconst matchAll = require('match-all')\n\nconst {getFileFromContainer} = require('./util')\n\nconst DEFAULT_CONFIG = {\n  network: 'main',\n}\n\nconst mergeConfig = config => ({\n  ...DEFAULT_CONFIG,\n  ...config,\n})\n\nconst getOptions = async config => {\n  const factomdConf = await getFileFromContainer('factomd.conf', mergeConfig(config))\n  return decode(factomdConf).app\n}\n\nconst getArgs = async config => {\n  const startupScript = await getFileFromContainer('start.sh', mergeConfig(config))\n  const regex = /-([a-zA-Z]+)=(\"?[^ \\\"]+\"?)/g\n\n  let match, args = {}\n  while ((match = regex.exec(startupScript)) != null) {\n    const [_, key, value] = match\n    args[key] = value\n  }\n  return args\n}\n\n\nconst randomInt = (min, max = min) => random(min === max ? 0 : min, max)\n\nconst randomSeconds = () => randomInt(0, 1000)\n\nconst randomPort = () => randomInt(1025, 65535)\n\nconst randomHexId = (len = 64) => times( () => random(0, 15).toString(16), len).join('')\n\nconst randomString = (len = 10) => times( () => random(10, 35).toString(36), len).join('')\n\nconst randomPem = () => {\n  const name = randomString()\n\n  return `-----BEGIN ${name}-----\n  ${randomHexId()}\n  -----END ${name}-----`\n}\n\nconst optTest = (yamlName, optionName, config, valueOverride) => test(`${yamlName} -> ${optionName}`, async t => {\n  const options = await getOptions(config)\n  t.is(valueOverride || config[yamlName].toString(), options[optionName].toString())\n})\n\nconst argTest = (yamlName, argName, config, valueOverride) => test(`${yamlName} -> ${argName}`, async t => {\n  const args = await getArgs(config)\n  t.is(valueOverride || config[yamlName].toString(), args[argName])\n})\n\noptTest('apiPassword', 'FactomdRpcPass', {apiPassword: 'password', apiUser: 'username'})\noptTest('apiPort', 'PortNumber', {apiPort: randomPort()})\noptTest('apiUser', 'FactomdRpcUser', {apiPassword: 'password', apiUser: 'username'})\noptTest('authorityServerPrivateKey', 'LocalServerPrivKey', {authorityServerPrivateKey: randomHexId(), authorityServerPublicKey: randomHexId()})\noptTest('authorityServerPublicKey', 'LocalServerPublicKey', {authorityServerPrivateKey: randomHexId(), authorityServerPublicKey: randomHexId()})\noptTest('brainSwapHeight', 'ChangeAcksHeight', {brainSwapHeight: randomInt(10000, 20000)})\nargTest('broadcastNumber', 'broadcastnum', {broadcastNumber: randomInt(1, 10000)})\noptTest('controlPanelMode', 'ControlPanelSetting', {controlPanelMode: 'disabled'})\noptTest('controlPanelPort', 'ControlPanelPort', {controlPanelPort: randomPort()})\noptTest('corsDomains', 'CorsDomains', {corsDomains: ['foo.com', 'bar.com']}, 'foo.com, bar.com')\noptTest('customBootstrapIdentity', 'CustomBootstrapIdentity', {customBootstrapIdentity: randomHexId()})\noptTest('customBootstrapKey', 'CustomBootstrapKey', {customBootstrapKey: randomHexId()})\noptTest('customExchangeRateAuthorityPublicKey', 'ExchangeRateAuthorityPublicKey', {customExchangeRateAuthorityPublicKey: randomHexId()})\nargTest('customNetworkId', 'customnet', {customNetworkId: randomString()})\noptTest('customNetworkPort', 'CustomNetworkPort', {customNetworkPort: randomPort()})\noptTest('customSeedUrl', 'CustomSeedURL', {customSeedUrl: 'http://foo.com'})\noptTest('customSpecialPeers', 'CustomSpecialPeers', {customSpecialPeers: ['1.2.3.4:1025', '6.7.8.9:5000']}, '1.2.3.4:1025 6.7.8.9:5000')\noptTest('directoryBlockInSeconds', 'DirectoryBlockInSeconds', {directoryBlockInSeconds: randomSeconds()})\noptTest('fastBoot', 'FastBoot', {fastBoot: true})\nargTest('faultTimeoutInSeconds', 'faulttimeout', {faultTimeoutInSeconds: randomSeconds()})\noptTest('identityChainId', 'IdentityChainID', {identityChainId: randomHexId()})\noptTest('localNetworkPort', 'LocalNetworkPort', {localNetworkPort: randomPort()})\noptTest('localSeedUrl', 'LocalSeedURL', {localSeedUrl: 'http://foo.com'})\noptTest('localSpecialPeers', 'LocalSpecialPeers', {localSpecialPeers: ['1.2.3.4:1025', '6.7.8.9:5000']}, '1.2.3.4:1025 6.7.8.9:5000')\nargTest('logLevel', 'loglvl', {logLevel: 'panic'})\noptTest('mainNetworkPort', 'MainNetworkPort', {mainNetworkPort: randomPort()})\noptTest('mainSeedUrl', 'MainSeedURL', {mainSeedUrl: 'http://foo.com'})\noptTest('mainSpecialPeers', 'MainSpecialPeers', {mainSpecialPeers: ['1.2.3.4:1025', '6.7.8.9:5000']}, '1.2.3.4:1025 6.7.8.9:5000')\noptTest('network', 'Network', {network: 'test'}, 'TEST')\nargTest('nodeName', 'nodename', {nodeName: randomString()})\nargTest('specialPeersDialOnly', 'exclusive', {specialPeersDialOnly: true})\nargTest('specialPeersOnly', 'exclusiveIn', {specialPeersOnly: true})\nargTest('startDelayInSeconds', 'startdelay', {startDelayInSeconds: randomSeconds()})\noptTest('testNetworkPort', 'TestNetworkPort', {testNetworkPort: randomPort()})\noptTest('testSeedUrl', 'TestSeedURL', {testSeedUrl: 'http://foo.com'})\noptTest('testSpecialPeers', 'TestSpecialPeers', {testSpecialPeers: ['1.2.3.4:1025', '6.7.8.9:5000']}, '1.2.3.4:1025 6.7.8.9:5000')\noptTest('tlsEnabled', 'FactomdTlsEnabled', {tlsEnabled: false})\noptTest('tlsPrivateKey', 'FactomdTlsPrivKey', {tlsPrivateKey: randomPem(), tlsPublicCert: randomPem()})\noptTest('tlsPublicCert', 'FactomdTlsPublicCert', {tlsPrivateKey: randomPem(), tlsPublicCert: randomPem()})\n\n\n"]}