{"version":3,"sources":["test/configTests.js"],"names":["test","require","decode","matchAll","getFileFromContainer","DEFAULT_CONFIG","network","mergeConfig","config","getOptions","factomdConf","app","getArgs","startupScript","regex","match","args","exec","_","key","value","generateHexId","console","log","toString","optionTest","yamlName","optionName","valueOverride","t","options","is","argTest","argName","apiPassword","apiUser","apiPort","faultTimeoutInSeconds"],"mappings":"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","sourceRoot":"/Users/jay/code/factomd-docker","sourcesContent":["const test = require('ava')\nconst {decode} = require('ini')\nconst matchAll = require('match-all')\n\nconst {getFileFromContainer} = require('./util')\n\nconst DEFAULT_CONFIG = {\n  network: 'main',\n}\n\nconst mergeConfig = config => ({\n  ...DEFAULT_CONFIG,\n  ...config,\n})\n\nconst getOptions = async config => {\n  const factomdConf = await getFileFromContainer('factomd.conf', mergeConfig(config))\n  return decode(factomdConf).app\n}\n\nconst getArgs = async config => {\n  const startupScript = await getFileFromContainer('start.sh', mergeConfig(config))\n  const regex = /-([a-z]+)=(\"?[^ \\\"]+\"?)/g\n\n  let match, args = {}\n  while ((match = regex.exec(startupScript)) != null) {\n    const [_, key, value] = match\n    args[key] = value\n  }\n  return args\n}\n\nconst generateHexId = () => {\n  console.log((11).toString(16))\n}\n\ngenerateHexId()\n\nconst optionTest = (yamlName, optionName, config, valueOverride) => test(`${yamlName} -> ${optionName}`, async t => {\n  const options = await getOptions(config)\n  t.is(valueOverride || config[yamlName], options[optionName])\n})\n\nconst argTest = (yamlName, argName, config, valueOverride) => test(`${yamlName} -> ${argName}`, async t => {\n  const args = await getArgs(config)\n  t.is(valueOverride || config[yamlName], args[argName])\n})\n\noptionTest('apiPassword', 'FactomdRpcPass', {apiPassword: 'password', apiUser: 'username'})\noptionTest('apiPort', 'PortNumber', {apiPort: 1234}, '1234')\noptionTest('apiUser', 'FactomdRpcUser', {apiPassword: 'password', apiUser: 'username'})\nargTest('faultTimeoutInSeconds', 'faulttimeout', {faultTimeoutInSeconds: 123}, '123')\n"]}