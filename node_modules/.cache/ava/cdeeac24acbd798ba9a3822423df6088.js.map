{"version":3,"sources":["test/configTests.js"],"names":["test","require","decode","random","times","matchAll","getFileFromContainer","DEFAULT_CONFIG","network","mergeConfig","config","getOptions","factomdConf","app","getArgs","startupScript","console","log","process","exit","regex","match","args","exec","_","key","value","randomInt","min","max","randomSeconds","randomPort","randomHexId","toString","join","optionTest","yamlName","optionName","valueOverride","t","options","is","argTest","argName","broadcastNumber"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAWD,OAAO,CAAC,KAAD,CAAxB;;AACA,MAAM;AAACE,EAAAA,MAAD;AAASC,EAAAA;AAAT,IAAkBH,OAAO,CAAC,WAAD,CAA/B;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AAEA,MAAM;AAACK,EAAAA;AAAD,IAAyBL,OAAO,CAAC,QAAD,CAAtC;;AAEA,MAAMM,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE;AADY,CAAvB;;AAIA,MAAMC,WAAW,GAAGC,MAAM,KAAK,EAC7B,GAAGH,cAD0B;AAE7B,KAAGG;AAF0B,CAAL,CAA1B;;AAKA,MAAMC,UAAU,GAAG,MAAMD,MAAN,IAAgB;AACjC,QAAME,WAAW,GAAG,MAAMN,oBAAoB,CAAC,cAAD,EAAiBG,WAAW,CAACC,MAAD,CAA5B,CAA9C;AACA,SAAOR,MAAM,CAACU,WAAD,CAAN,CAAoBC,GAA3B;AACD,CAHD;;AAKA,MAAMC,OAAO,GAAG,MAAMJ,MAAN,IAAgB;AAC9B,QAAMK,aAAa,GAAG,MAAMT,oBAAoB,CAAC,UAAD,EAAaG,WAAW,CAACC,MAAD,CAAxB,CAAhD;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACAG,EAAAA,OAAO,CAACC,IAAR;AACA,QAAMC,KAAK,GAAG,0BAAd;AAEA,MAAIC,KAAJ;AAAA,MAAWC,IAAI,GAAG,EAAlB;;AACA,SAAO,CAACD,KAAK,GAAGD,KAAK,CAACG,IAAN,CAAWR,aAAX,CAAT,KAAuC,IAA9C,EAAoD;AAClD,UAAM,CAACS,CAAD,EAAIC,GAAJ,EAASC,KAAT,IAAkBL,KAAxB;AACAC,IAAAA,IAAI,CAACG,GAAD,CAAJ,GAAYC,KAAZ;AACD;;AACD,SAAOJ,IAAP;AACD,CAZD;;AAeA,MAAMK,SAAS,GAAG,CAACC,GAAD,EAAMC,GAAG,GAAGD,GAAZ,KAAoBzB,MAAM,CAACyB,GAAG,KAAKC,GAAR,GAAc,CAAd,GAAkBD,GAAnB,EAAwBC,GAAxB,CAA5C;;AAEA,MAAMC,aAAa,GAAG,MAAMH,SAAS,CAAC,CAAD,EAAI,IAAJ,CAArC;;AAEA,MAAMI,UAAU,GAAG,MAAMJ,SAAS,CAAC,IAAD,EAAO,KAAP,CAAlC;;AAEA,MAAMK,WAAW,GAAG,MAAM5B,KAAK,CAAE,MAAMD,MAAM,CAAC,CAAD,EAAI,EAAJ,CAAN,CAAc8B,QAAd,CAAuB,EAAvB,CAAR,EAAoC,EAApC,CAAL,CAA6CC,IAA7C,CAAkD,EAAlD,CAA1B;;AAEA,MAAMC,UAAU,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuB3B,MAAvB,EAA+B4B,aAA/B,KAAiDtC,IAAI,CAAE,GAAEoC,QAAS,OAAMC,UAAW,EAA9B,EAAiC,MAAME,CAAN,IAAW;AAClH,QAAMC,OAAO,GAAG,MAAM7B,UAAU,CAACD,MAAD,CAAhC;AACA6B,EAAAA,CAAC,CAACE,EAAF,CAAKH,aAAa,IAAI5B,MAAM,CAAC0B,QAAD,CAAN,CAAiBH,QAAjB,EAAtB,EAAmDO,OAAO,CAACH,UAAD,CAA1D;AACD,CAHuE,CAAxE;;AAKA,MAAMK,OAAO,GAAG,CAACN,QAAD,EAAWO,OAAX,EAAoBjC,MAApB,EAA4B4B,aAA5B,KAA8CtC,IAAI,CAAE,GAAEoC,QAAS,OAAMO,OAAQ,EAA3B,EAA8B,MAAMJ,CAAN,IAAW;AACzG,QAAMjB,IAAI,GAAG,MAAMR,OAAO,CAACJ,MAAD,CAA1B;AACA6B,EAAAA,CAAC,CAACE,EAAF,CAAKH,aAAa,IAAI5B,MAAM,CAAC0B,QAAD,CAAN,CAAiBH,QAAjB,EAAtB,EAAmDX,IAAI,CAACqB,OAAD,CAAvD;AACD,CAHiE,CAAlE,C,CAKA;AACA;AACA;AACA;AACA;AACA;;;AACAD,OAAO,CAAC,iBAAD,EAAoB,cAApB,EAAoC;AAACE,EAAAA,eAAe,EAAEjB,SAAS,CAAC,CAAD,EAAI,KAAJ;AAA3B,CAApC,CAAP,C,CACA","sourceRoot":"/Users/jay/code/factomd-docker","sourcesContent":["const test = require('ava')\nconst {decode} = require('ini')\nconst {random, times} = require('lodash/fp')\nconst matchAll = require('match-all')\n\nconst {getFileFromContainer} = require('./util')\n\nconst DEFAULT_CONFIG = {\n  network: 'main',\n}\n\nconst mergeConfig = config => ({\n  ...DEFAULT_CONFIG,\n  ...config,\n})\n\nconst getOptions = async config => {\n  const factomdConf = await getFileFromContainer('factomd.conf', mergeConfig(config))\n  return decode(factomdConf).app\n}\n\nconst getArgs = async config => {\n  const startupScript = await getFileFromContainer('start.sh', mergeConfig(config))\n  console.log(startupScript)\n  process.exit()\n  const regex = /-([a-z]+)=(\"?[^ \\\"]+\"?)/g\n\n  let match, args = {}\n  while ((match = regex.exec(startupScript)) != null) {\n    const [_, key, value] = match\n    args[key] = value\n  }\n  return args\n}\n\n\nconst randomInt = (min, max = min) => random(min === max ? 0 : min, max)\n\nconst randomSeconds = () => randomInt(0, 1000)\n\nconst randomPort = () => randomInt(1025, 65535)\n\nconst randomHexId = () => times( () => random(0, 15).toString(16), 64).join('')\n\nconst optionTest = (yamlName, optionName, config, valueOverride) => test(`${yamlName} -> ${optionName}`, async t => {\n  const options = await getOptions(config)\n  t.is(valueOverride || config[yamlName].toString(), options[optionName])\n})\n\nconst argTest = (yamlName, argName, config, valueOverride) => test(`${yamlName} -> ${argName}`, async t => {\n  const args = await getArgs(config)\n  t.is(valueOverride || config[yamlName].toString(), args[argName])\n})\n\n// optionTest('apiPassword', 'FactomdRpcPass', {apiPassword: 'password', apiUser: 'username'})\n// optionTest('apiPort', 'PortNumber', {apiPort: randomPort()})\n// optionTest('apiUser', 'FactomdRpcUser', {apiPassword: 'password', apiUser: 'username'})\n// optionTest('authorityServerPrivateKey', 'LocalServerPrivKey', {authorityServerPrivateKey: randomHexId(), authorityServerPublicKey: randomHexId()})\n// optionTest('authorityServerPublicKey', 'LocalServerPublicKey', {authorityServerPrivateKey: randomHexId(), authorityServerPublicKey: randomHexId()})\n// optionTest('brainSwapHeight', 'ChangeAcksHeight', {brainSwapHeight: randomInt(10000, 20000)})\nargTest('broadcastNumber', 'broadcastnum', {broadcastNumber: randomInt(1, 10000)})\n// argTest('faultTimeoutInSeconds', 'faulttimeout', {faultTimeoutInSeconds: randomSeconds()})\n"]}