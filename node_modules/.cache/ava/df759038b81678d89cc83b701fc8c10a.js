"use strict";

const test = require('ava');

const {
  decode
} = require('ini');

const {
  random,
  times
} = require('lodash/fp');

const matchAll = require('match-all');

const {
  getFileFromContainer
} = require('./util');

const DEFAULT_CONFIG = {
  network: 'main'
};

const mergeConfig = config => ({ ...DEFAULT_CONFIG,
  ...config
});

const getOptions = async config => {
  const factomdConf = await getFileFromContainer('factomd.conf', mergeConfig(config));
  return decode(factomdConf).app;
};

const getArgs = async config => {
  const startupScript = await getFileFromContainer('start.sh', mergeConfig(config));
  const regex = /-([a-z]+)=("?[^ \"]+"?)/g;
  let match,
      args = {};

  while ((match = regex.exec(startupScript)) != null) {
    const [_, key, value] = match;
    args[key] = value;
  }

  return args;
};

const randomInt = (min, max = min) => random(min === max ? 0 : min, max);

const randomSeconds = () => randomInt(0, 1000);

const randomPort = () => randomInt(1025, 65535);

const randomHexId = () => times(() => random(0, 15).toString(16), 64).join('');

const optionTest = (yamlName, optionName, config, valueOverride) => test(`${yamlName} -> ${optionName}`, async t => {
  const options = await getOptions(config);
  t.is(valueOverride || config[yamlName].toString(), options[optionName]);
});

const argTest = (yamlName, argName, config, valueOverride) => test(`${yamlName} -> ${argName}`, async t => {
  const args = await getArgs(config);
  t.is(valueOverride || config[yamlName].toString(), args[argName]);
});

console.log(getArgs(mergeConfig({
  broadcastNumber: randomInt(1, 10000)
})));
optionTest('apiPassword', 'FactomdRpcPass', {
  apiPassword: 'password',
  apiUser: 'username'
});
optionTest('apiPort', 'PortNumber', {
  apiPort: randomPort()
});
optionTest('apiUser', 'FactomdRpcUser', {
  apiPassword: 'password',
  apiUser: 'username'
});
optionTest('authorityServerPrivateKey', 'LocalServerPrivKey', {
  authorityServerPrivateKey: randomHexId(),
  authorityServerPublicKey: randomHexId()
});
optionTest('authorityServerPublicKey', 'LocalServerPublicKey', {
  authorityServerPrivateKey: randomHexId(),
  authorityServerPublicKey: randomHexId()
});
optionTest('brainSwapHeight', 'ChangeAcksHeight', {
  brainSwapHeight: randomInt(10000, 20000)
});
argTest('broadcastNumber', 'broadcastnum', {
  broadcastNumber: randomInt(1, 10000)
});
argTest('faultTimeoutInSeconds', 'faulttimeout', {
  faultTimeoutInSeconds: randomSeconds()
});
//# sourceMappingURL=/Users/jay/code/factomd-docker/node_modules/.cache/ava/df759038b81678d89cc83b701fc8c10a.js.map