{"version":3,"sources":["test/configTests.js"],"names":["test","require","decode","getFileFromContainer","DEFAULT_CONFIG","network","mergeConfig","config","getOptions","factomdConf","app","getArgs","startupScript","console","log","optionTest","yamlName","optionName","valueOverride","t","options","is","argTest","argName","args","apiPassword","apiUser","apiPort","faultTimeoutInSeconds"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAWD,OAAO,CAAC,KAAD,CAAxB;;AAEA,MAAM;AAACE,EAAAA;AAAD,IAAyBF,OAAO,CAAC,QAAD,CAAtC;;AAEA,MAAMG,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE;AADY,CAAvB;;AAIA,MAAMC,WAAW,GAAGC,MAAM,KAAK,EAC7B,GAAGH,cAD0B;AAE7B,KAAGG;AAF0B,CAAL,CAA1B;;AAKA,MAAMC,UAAU,GAAG,MAAMD,MAAN,IAAgB;AACjC,QAAME,WAAW,GAAG,MAAMN,oBAAoB,CAAC,cAAD,EAAiBG,WAAW,CAACC,MAAD,CAA5B,CAA9C;AACA,SAAOL,MAAM,CAACO,WAAD,CAAN,CAAoBC,GAA3B;AACD,CAHD;;AAKA,MAAMC,OAAO,GAAG,MAAMJ,MAAN,IAAgB;AAC9B,QAAMK,aAAa,GAAG,MAAMT,oBAAoB,CAAC,UAAD,EAAaG,WAAW,CAACC,MAAD,CAAxB,CAAhD;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACD,CAHD;;AAKA,MAAMG,UAAU,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBV,MAAvB,EAA+BW,aAA/B,KAAiDlB,IAAI,CAAE,GAAEgB,QAAS,OAAMC,UAAW,EAA9B,EAAiC,MAAME,CAAN,IAAW;AAClH,QAAMC,OAAO,GAAG,MAAMZ,UAAU,CAACD,MAAD,CAAhC;AACAY,EAAAA,CAAC,CAACE,EAAF,CAAKH,aAAa,IAAIX,MAAM,CAACS,QAAD,CAA5B,EAAwCI,OAAO,CAACH,UAAD,CAA/C;AACD,CAHuE,CAAxE;;AAKA,MAAMK,OAAO,GAAG,CAACN,QAAD,EAAWO,OAAX,EAAoBhB,MAApB,EAA4BW,aAA5B,KAA8ClB,IAAI,CAAE,GAAEgB,QAAS,OAAMO,OAAQ,EAA3B,EAA8B,MAAMJ,CAAN,IAAW;AACzG,QAAMK,IAAI,GAAG,MAAMb,OAAO,CAACJ,MAAD,CAA1B;AACAY,EAAAA,CAAC,CAACE,EAAF,CAAKH,aAAa,IAAIX,MAAM,CAACS,QAAD,CAA5B,EAAwCQ,IAAI,CAACP,UAAD,CAA5C;AACD,CAHiE,CAAlE;;AAKAF,UAAU,CAAC,aAAD,EAAgB,gBAAhB,EAAkC;AAACU,EAAAA,WAAW,EAAE,UAAd;AAA0BC,EAAAA,OAAO,EAAE;AAAnC,CAAlC,CAAV;AACAX,UAAU,CAAC,SAAD,EAAY,YAAZ,EAA0B;AAACY,EAAAA,OAAO,EAAE;AAAV,CAA1B,EAA2C,MAA3C,CAAV;AACAZ,UAAU,CAAC,SAAD,EAAY,gBAAZ,EAA8B;AAACU,EAAAA,WAAW,EAAE,UAAd;AAA0BC,EAAAA,OAAO,EAAE;AAAnC,CAA9B,CAAV;AACAJ,OAAO,CAAC,uBAAD,EAA0B,cAA1B,EAA0C;AAACM,EAAAA,qBAAqB,EAAE;AAAxB,CAA1C,CAAP","sourceRoot":"/Users/jay/code/factomd-docker","sourcesContent":["const test = require('ava')\nconst {decode} = require('ini')\n\nconst {getFileFromContainer} = require('./util')\n\nconst DEFAULT_CONFIG = {\n  network: 'main',\n}\n\nconst mergeConfig = config => ({\n  ...DEFAULT_CONFIG,\n  ...config,\n})\n\nconst getOptions = async config => {\n  const factomdConf = await getFileFromContainer('factomd.conf', mergeConfig(config))\n  return decode(factomdConf).app\n}\n\nconst getArgs = async config => {\n  const startupScript = await getFileFromContainer('start.sh', mergeConfig(config))\n  console.log(startupScript)\n}\n\nconst optionTest = (yamlName, optionName, config, valueOverride) => test(`${yamlName} -> ${optionName}`, async t => {\n  const options = await getOptions(config)\n  t.is(valueOverride || config[yamlName], options[optionName])\n})\n\nconst argTest = (yamlName, argName, config, valueOverride) => test(`${yamlName} -> ${argName}`, async t => {\n  const args = await getArgs(config)\n  t.is(valueOverride || config[yamlName], args[optionName])\n})\n\noptionTest('apiPassword', 'FactomdRpcPass', {apiPassword: 'password', apiUser: 'username'})\noptionTest('apiPort', 'PortNumber', {apiPort: 1234}, '1234')\noptionTest('apiUser', 'FactomdRpcUser', {apiPassword: 'password', apiUser: 'username'})\nargTest('faultTimeoutInSeconds', 'faulttimeout', {faultTimeoutInSeconds: 123})\n"]}